~I~got~a~program~running~on~my~local~machine~which~uses~some~files~.~I~create~the~reference~to~the~files~by~using~:~os.path.join( tempfile.gettempdir(), 'filename.txt' )~ 
~After~that~I~'m~running~a~program~which~accepts~some~parameters~--log-file filepath~where~filepath~is~one~of~the~files~I~just~explained~above~.~ 
~On~my~machine~python~creates~backslashes~for~the~paths~but~not~double~backslashes~and~the~program~complains~because~it~'s~considered~an~escape~character~and~should~be~a~double~backslash~.~ 
~Is~there~any~standard~way~of~making~sure~that~I~get~a~working~path~with~double~backslashes~in~python~?~I~could~use~regex~but~I~would~prefer~something~similar~to~what~os.~provides~.~Maybe~I'm~missing~something~.~
~I~'m~calling~the~program~using~subprocess.Popen~:~ 
~self._proc = subprocess.Popen( command.split( ' ' ) )~ 
~where~command~is~something~like~pcix.exe --log-file file_path~ 
~Also~,~running~a~test~on~my~console~shows~that~my~python~does~not~produce~double~backslash~for~paths~:~ 
~&gt;&gt;&gt; print os.path.join(tempfile.gettempdir(), "test.txt")
c:\users\manilo~1\appdata\local\temp\test.txt
~Leaving~out~the~print~command~produces~the~same~path~:~ 
~&gt;&gt;&gt; os.path.join(tempfile.gettempdir(), "test.txt")
c:\users\manilo~1\appdata\local\temp\test.txt
~Any~idea~why~?~
~P.S~.~The~platform~i~'m~running~is~CPython~ 
