~I~wrote~a~decorator~which~you~can~use~on~any~method~to~make~it~so~that~all~of~the~arguments~passed~in~,~or~any~defaults~,~are~assigned~to~the~instance~.~

~~def argumentsToAttributes(method):
    argumentNames = method.func_code.co_varnames[1:]

    # Generate a dictionary of default values:
    defaultsDict = {}
    defaults = method.func_defaults if method.func_defaults else ()
    for i, default in enumerate(defaults, start = len(argumentNames) - len(defaults)):
        defaultsDict[argumentNames[i]] = default

    def newMethod(self, *args, **kwargs):
        # Use the positional arguments.
        for name, value in zip(argumentNames, args):
            setattr(self, name, value)

        # Add the key word arguments. If anything is missing, use the default.
        for name in argumentNames[len(args):]:
            setattr(self, name, kwargs.get(name, defaultsDict[name]))

        # Run whatever else the method needs to do.
        method(self, *args, **kwargs)

    return newMethod
~~

~A~quick~demonstration~.~Note~that~I~use~a~positional~argument~~a~,~use~the~default~value~for~~b~,~and~a~named~argument~~c~.~I~then~print~all~3~referencing~~self~,~to~show~that~they~'ve~been~properly~assigned~before~the~method~is~entered~.~

~~class A(object):
    @argumentsToAttributes
    def __init__(self, a, b = 'Invisible', c = 'Hello'):
        print(self.a)
        print(self.b)
        print(self.c)

A('Why', c = 'Nothing')
~~

~Note~that~my~decorator~should~work~with~any~method~,~not~just~~__init__~.~
