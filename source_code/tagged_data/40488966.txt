~I~do~n't~see~this~answer~here~,~so~I~figure~I~'ll~add~it~since~I~'m~leaning~Python~right~now~and~just~discovered~it~.~The~~Python~tutorial~~(~Python~2~in~this~case~)~gives~the~following~simple~and~effective~example~:~

~~class Employee:
    pass

john = Employee()  # Create an empty employee record

# Fill the fields of the record
john.name = 'John Doe'
john.dept = 'computer lab'
john.salary = 1000
~~

~That~is~,~an~empty~class~object~is~created~,~then~instantiated~,~and~the~fields~are~added~dynamically~.~

~The~up-side~to~this~is~its~really~simple~.~The~downside~is~it~is~n't~particularly~self-documenting~(~the~intended~members~are~n't~listed~anywhere~in~the~class~"~definition~"~)~,~and~unset~fields~can~cause~problems~when~accessed~.~Those~two~problems~can~be~solved~by~:~

~~class Employee:
    def __init__ (self):
        self.name = None # or whatever
        self.dept = None
        self.salary = None
~~

~Now~at~a~glance~you~can~at~least~see~what~fields~the~program~will~be~expecting~.~

~Both~are~prone~to~typos~,~~john.slarly = 1000~~will~succeed~.~Still~,~it~works~.~
